name: Dispatch Domains and Generate Documentation

on:
  push:
    branches: [main]
    paths-ignore:
      - "**/README.md"

jobs:
  dispatch-domains:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          # Set the owner, so the token can be used to dispatch to other repositories.
          owner: ${{ github.repository_owner }}
          repositories: "errors-go,errors-ts,error-domain"

      - name: Normalize commit message
        id: normalize-commit
        run: |
          formatted_message=$(echo "${{ github.event.head_commit.message }}" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "commit_message=$formatted_message" >> $GITHUB_OUTPUT
          echo "Normalized commit message: $formatted_message" # Debug output

      - name: Dispatch Go
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ steps.generate-token.outputs.token }}
          event-type: generate-errors
          client-payload: '{"commit-message": "${{ steps.normalize-commit.outputs.commit_message }}"}'
          repository: wwi21seb-projekt/errors-go

      - name: Dispatch TypeScript
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ steps.generate-token.outputs.token }}
          event-type: generate-errors
          client-payload: '{"commit-message": "${{ steps.normalize-commit.outputs.commit_message }}"}'
          repository: wwi21seb-projekt/errors-ts

      - name: Generate Documentation and commit
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const fs = require('fs');
            const path = './errors.json';
            const markdownPath = './README.md';

            console.log('Generating README...');

            // Check if errors.json exists
            if (fs.existsSync(path)) {
              const data = fs.readFileSync(path, 'utf8');
              const errors = JSON.parse(data);
              
              // Write static content to README.md
              let output = '# Error Codes\n\n';
              output += 'This is the shared error domain for the project. If you want to contribute, you need to add the error to `errors.json` and commit it using conventional commits.\n\n';

              // Generate Markdown table
              output += `| Title | Code | Message | HTTP Status |\n`;
              output += `| --- | --- | --- | --- |\n`;
              
              errors.forEach(error => {
                output += `| ${error.title} | ${error.code} | ${error.message.replace(/\|/g, '\\|')} | ${error.http_status} |\n`;
              });

              // Write to README.md
              fs.writeFileSync(markdownPath, output);

              // Read the updated content of README.md
              const updatedContent = fs.readFileSync(markdownPath, 'utf8');
              
              // Fetch the current README.md file from the repository to get the SHA
              const { data: { sha: currentSha } } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'README.md'
              });

              // Base64 encode the updated content
              const encodedContent = Buffer.from(updatedContent).toString('base64');

              console.log('Committing changes...');
              await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'README.md',
                message: 'docs: update README.md',
                content: encodedContent,
                sha: currentSha
              });

              console.log('README generated successfully!');
            } else {
              console.log('errors.json does not exist.');
            }
